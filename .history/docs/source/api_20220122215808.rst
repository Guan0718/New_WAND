Lua API
=========
 

.. _gameplay:

Game Play
^^^^^^^^^^^

.. function:: Player = GetPlayer()

	:return: a table of player's attributes

		.. code-block:: text

			Player (table)
			├── x (int)
			├── y (int)
			├── level (int)
			├── exp (float)
			├── hp (int)
			├── mp (int)
			├── maxHp (int)
			├── maxMp (int)
			├── ani (int)
			├── Orientation (int)
			├── InAir  (bool)
			├── OnRope (bool)
			└── IsDead (bool)

	:example: 
		.. code-block:: lua

			-- print Player level
			Player = GetPlayer()
			print("Level:", Player.level)
			
---------------------------------------

.. function:: n = GetChannel()

	:return: integer, current channel

---------------------------------------

.. function:: n = GetMapID()

	:return: integer, current map ID
	
---------------------------------------

.. function:: n = GetMobNum()

	:return: integer, number of mobs

---------------------------------------

.. function:: mob = GetMob(arg1)

	:param arg1: index of mob, starts with ``0``
	:type arg1: int 

	:return:  a table of one mob's attributes

		.. code-block:: text
	
			mob (table)
			├── x (int)
			├── y (int)
			└── invisible (bool)

	:example: 
		.. code-block:: lua

			-- print the position of first mob
			mob = GetMob(0)
			print(mob.x," ", mob.y)
	
	:note:
		* Depending on server, ``invisible`` may not be accurate 

---------------------------------------

.. function:: mobs = GetAllMobs()

	:return: a table of mobs

		.. code-block:: text

			mobs (table)
			├── mob (table)
			│   ├── x (int)
			│   ├── y (int)
			│   └── invisible (bool)
			├── mob
			│   ├── x
			│   ├── y
			│   └── invisible
			│ 
			...

	:example: 
		.. code-block:: lua

			-- print mob position
			mobs = GetAllMobs()
			for k, mob in pairs(mobs) do
				print(mob.x," ", mob.y)
			end

	:note:
		* it's recommended to use ``GetAllMobs()`` instead of ``GetMob()``

---------------------------------------

.. function:: n = GetDropNum()

	:return: integer, number of drops on the ground

---------------------------------------

.. function:: item = GetDrop(arg1)

	:param arg1: index of drop, starts with ``0``
	:type arg1: int 

	:return:  a table of attributes for one dropped item

		.. code-block:: text
	
			item (table)
			├── x (int)
			├── y (int)
			├── ID (int)
			├── UID (int)
			└── type (string)

	:example: 
		.. code-block:: lua

			-- print the type of first item on the ground
			item = GetDrop(0)
			print(item.Type)

	:note:
		* Type equals one of: ``"Equip"``, ``"Use"``, ``"Setup"``, ``"Etc"``, ``"Cash"``, ``"Mesos"``
		* for ``"Mesos"``: ``item.ID`` is the amount of Mesos in the bag

---------------------------------------

.. function:: items = GetAllDrops()
	
	:return:  a table of dropped items

		.. code-block:: text
	
			items (table)
			├── item (table)
			│   ├── x (int)
			│   ├── y (int)
			│   ├── ID (int)
			│   ├── UID (int)
			│   └── type (string)
			│
			├── item (table)
			│   ├── x (int)
			│   ├── y (int)
			│   ├── ID (int)
			│   ├── UID (int)
			│   └── type (string)
			...

	:example: 
		.. code-block:: lua

			-- print all items on the ground
			items = GetAllDrops()
			for k, item in pairs(items) do
				print(item.type,": ",item.ID)
			end

---------------------------------------

.. function:: n = GetOtherPlayersCount()

	:return: integer, number of other players

---------------------------------------

.. function:: Players = GetOtherPlayers()
	
	:return: a table of other players

		.. code-block:: text

			Players (table)
			├── player (table)
			│   ├── x (int)
			│   ├── y (int)
			│   ├── UID (int)
			│   └── name (str)
			│
			├── player (table)
			│   ├── x (int)
			│   ├── y (int)
			│   ├── UID (int)
			│   └── name (str)
			│ 
			...

	:example: 
		.. code-block:: lua

			-- print other players' name
			Players = GetOtherPlayers()
			for k, player in pairs(Players) do
				print(player.name)
			end

	:note:
		* This function relies on decoding packets, it's recommended that you CC after the every injection of WAND to setfield. (i.e. If WAND doesn't show correct map name on the UI, that means you need to refresh by changing channel)


---------------------------------------

.. function:: MobIDs = GetMobIDinMap()

	:return: a table of IDs for current mobs

		{ID_1, ID_2, ID_3, ...}


	:example: 
		.. code-block:: lua

			-- print every ID of mobs
			MobIDs = GetMobIDinMap()
			for _, ID in ipairs(MobIDs) do
				print(ID)
			end

	:note:
		* Similar to ``GetOtherPlayers()``, this function relies on decoding packets, it's recommended that you CC after the every injection of WAND to setfield. 
		* You can use this function to check if any strange mob is spawned by GM


---------------------------------------

.. function:: GetBuffandDebuff()
		:return: tables of buffs and debuffs

		.. code-block:: text

			├
			├── player (table)
			│   ├── x (int)
			│   ├── y (int)
			│   ├── UID (int)
			│   └── name (str)
			│
			├── player (table)
			│   ├── x (int)
			│   ├── y (int)
			│   ├── UID (int)
			│   └── name (str)
			│ 
			...

	:example: 
		.. code-block:: lua

			-- print other players' name
			Players = GetOtherPlayers()
			for k, player in pairs(Players) do
				print(player.name)
			end

	:note:
		* This function relies on decoding packets, it's recommended that you CC after the every injection of WAND to setfield. (i.e. If WAND doesn't show correct map name on the UI, that means you need to refresh by changing channel)


---------------------------------------

.. function:: FindNextPortal()

---------------------------------------

.. function:: RefreshInventory(arg1)
	
	:param arg1: a table of string, contains any of these four options: ``"Equip"``, ``"Use"``, ``"Etc"``, ``"Cash"``
	:type arg1: table
	:return: none
	:example:
		.. code-block:: lua

			-- Refresh Equip only
			RefreshInventory({"Equip"})

			-- Refresh All
			RefreshInventory({"Equip", "Use", "Etc", "Cash"})

	:note:
		* This function is packet-based and takes about half sec, please don't call it too frequently 
		* Depending on server, the results may not be accurate

---------------------------------------

.. function:: GetFullInventory()

---------------------------------------

.. function:: GetMapDimension()

---------------------------------------

.. function:: GetMapStructure()


.. function:: ItemLocationInStore()


.. function:: NumOnQuickSlot()

.. _input:

Input
^^^^^^^^^^^

.. function:: SendKey(arg1, arg2=1)

.. function:: HoldKey(arg1, arg2)

.. function:: LeftClickOnScreen()

.. function:: LeftClickOnWindow()



.. _control:

Control
^^^^^^^^^^^


.. function:: MoveTo()

.. function:: StopMove()

.. function:: StopScript()

.. function:: SetMapData()

.. _hack:

Hack
^^^^^^^^^^^

.. function:: SetMobFilter()

.. function:: SetItemFilter()

.. function:: EnableHacks()

.. function:: DisableHacks()

.. function:: DisableAllHacks()

.. function:: MapRush()



.. _utility:

Utility
^^^^^^^^^^^

.. function:: Delay(arg1)
	
	:param arg1: millisecond
	:type arg1: integer
	:return: none

	:example:
		.. code-block:: lua

			-- lua thread sleeps for 1 sec
			Delay(1000)

---------------------------------------

.. function:: SendPacket(arg1)

	:param arg1: raw packet
	:type arg1: string
	:return: none
	:example:
		.. code-block:: lua

			-- change to channel 2
			SendPacket("27 00 01 00 00 00 00")

---------------------------------------


.. function:: RecvPacket(arg1)

	:param arg1: raw packet
	:type arg1: string
	:return: none
	:example:
		.. code-block:: lua

			-- Buff Magic Guard Client-side
			RecvPacket("20 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00
			 00 28 00 6B 88 1E 00 80 1A 06 00 00 00 00 00 00 28 00 00 00")

	:note: 
		* This function posts a packet to client, so server will not know
		* If you use this function for buffing, added buff will never die. However, this doesn't work for some buffs and may be risky for att-adding buffs

.. function:: AssignAP()

.. function:: ReadInput()

.. function:: FindBMP()

.. function:: PlayWav()

.. function:: ChangeChannel()

.. function:: ReadPointerLua()

.. function:: ReadMultiSignedLua()

.. function:: RemoveBlockPacket()

.. function:: InsertBlockPacket()














